! This module stores the runtime parameters and integer names for 
! indexing arrays.
!
! The Fortran-specific parameters are initialized in set_method_params(),
! and the ones that we are mirroring from C++ and obtaining through the
! ParmParse module are initialized in set_castro_method_params().

module meth_params_module

  use bl_error_module

  use amrex_fort_module, only : rt => amrex_real
  implicit none

  ! number of ghost cells for the hyperbolic solver
  integer, parameter     :: NHYP    = 4

  ! NTHERM: number of thermodynamic variables
  integer, save :: NTHERM, NVAR
  integer, save :: URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS, UFX
  integer, save :: USHK

  ! QTHERM: number of primitive variables
  integer, save :: QTHERM, QVAR
  integer, save :: QRHO, QU, QV, QW, QPRES, QREINT, QTEMP, QGAME
  integer, save :: NQAUX, QGAMC, QC, QCSML, QDPDR, QDPDE
#ifdef RADIATION
  integer, save :: QGAMCG, QCG, QLAMS
#endif
  integer, save :: QFA, QFS, QFX

  integer, save :: nadv

  ! NQ will be the total number of primitive variables, hydro + radiation
  integer, save :: NQ         

#ifdef RADIATION
  integer, save :: QRADVAR, QRAD, QRADHI, QPTOT, QREITOT
  integer, save :: fspace_type
  logical, save :: do_inelastic_scattering
  logical, save :: comoving

  real(rt)        , save :: flatten_pp_threshold = -1.e0_rt
#endif

  integer, save :: npassive
  integer, save, allocatable :: qpass_map(:), upass_map(:)

  ! These are used for the Godunov state
  ! Note that the velocity indices here are picked to be the same value
  ! as in the primitive variable array
  integer, save :: NGDNV, GDRHO, GDU, GDV, GDW, GDPRES, GDGAME
#ifdef RADIATION
  integer, save :: GDLAMS, GDERADS
#endif

  integer         , save :: numpts_1d

  real(rt)        , save, allocatable :: outflow_data_old(:,:)
  real(rt)        , save, allocatable :: outflow_data_new(:,:)
  real(rt)        , save :: outflow_data_old_time
  real(rt)        , save :: outflow_data_new_time
  logical         , save :: outflow_data_allocated
  real(rt)        , save :: max_dist

  character(len=:), allocatable :: gravity_type

  ! these flags are for interpreting the EXT_DIR BCs
  integer, parameter :: EXT_UNDEFINED = -1
  integer, parameter :: EXT_HSE = 1
  integer, parameter :: EXT_INTERP = 2 
  
  integer, save :: xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext

  ! Create versions of these variables on the GPU
  ! the device update is then done in Castro_nd.f90

#ifdef CUDA
  integer, device :: NTHERM_d, NVAR_d, NQ_d
  integer, device :: URHO_d, UMX_d, UMY_d, UMZ_d, UMR_d, UML_d, UMP_d
  integer, device :: UEDEN_d, UEINT_d, UTEMP_d, UFA_d, UFS_d, UFX_d
  integer, device :: USHK_d
  integer, device :: QTHERM_d, QVAR_d
  integer, device :: QRHO_d, QU_d, QV_d, QW_d, QPRES_d, QREINT_d, QTEMP_d
  integer, device :: QGAMC_d, QGAME_d
#ifdef RADIATION
  integer, device :: QGAMCG_d, QCG_d, QLAMS_d
  integer, device :: QRADVAR_d, QRAD_d, QRADHI_d, QPTOT_d, QREITOT_d
  integer, device :: fspace_type_d, do_inelastic_scattering_d, comoving_d
  integer, device :: flatten_pp_threshold
#endif
  integer, device :: QFA_d, QFS_d, QFX_d
  integer, device :: xl_ext_d, yl_ext_d, zl_ext_d, xr_ext_d, yr_ext_d, zr_ext_d
#endif

  !$acc declare &
  !$acc create(NTHERM, NVAR) &
  !$acc create(URHO, UMX, UMY, UMZ, UMR, UML, UMP, UEDEN, UEINT, UTEMP, UFA, UFS,UFX) &
  !$acc create(USHK) &
  !$acc create(QTHERM, QVAR) &
  !$acc create(QRHO, QU, QV, QW, QPRES, QREINT, QTEMP) &
  !$acc create(QGAMC, QGAME) &
  !$acc create(NQ) &
#ifdef RADIATION
  !$acc create(QGAMCG, QCG, QLAMS) &
  !$acc create(QRADVAR, QRAD, QRADHI, QPTOT, QREITOT) &
  !$acc create(fspace_type, do_inelastic_scattering, comoving) &
  !$acc create(flatten_pp_threshold) &
#endif
  !$acc create(QFA, QFS, QFX, NQAUX) &
  !$acc create(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)

  ! Begin the declarations of the ParmParse parameters

  @@f90_declarations@@

  ! End the declarations of the ParmParse parameters

  real(rt)        , save :: rot_vec(3)

contains

  subroutine set_castro_method_params() bind(C,name="set_castro_method_params")

    use amrex_parmparse_module, only: amrex_parmparse_build, amrex_parmparse_destroy, amrex_parmparse

    use amrex_fort_module, only : rt => amrex_real
    implicit none

    type (amrex_parmparse) :: pp

    call amrex_parmparse_build(pp, "castro")

    @@set_castro_params@@


    ! now set the external BC flags
    select case (xl_ext_bc_type)
    case ("hse", "HSE")
       xl_ext = EXT_HSE
    case ("interp", "INTERP")       
       xl_ext = EXT_INTERP
    case default
       xl_ext = EXT_UNDEFINED
    end select

    select case (yl_ext_bc_type)
    case ("hse", "HSE")
       yl_ext = EXT_HSE
    case ("interp", "INTERP")       
       yl_ext = EXT_INTERP
    case default
       yl_ext = EXT_UNDEFINED
    end select

    select case (zl_ext_bc_type)
    case ("hse", "HSE")
       zl_ext = EXT_HSE
    case ("interp", "INTERP")       
       zl_ext = EXT_INTERP
    case default
       zl_ext = EXT_UNDEFINED
    end select

    select case (xr_ext_bc_type)
    case ("hse", "HSE")
       xr_ext = EXT_HSE
    case ("interp", "INTERP")       
       xr_ext = EXT_INTERP
    case default
       xr_ext = EXT_UNDEFINED
    end select

    select case (yr_ext_bc_type)
    case ("hse", "HSE")
       yr_ext = EXT_HSE
    case ("interp", "INTERP")       
       yr_ext = EXT_INTERP
    case default
       yr_ext = EXT_UNDEFINED
    end select

    select case (zr_ext_bc_type)
    case ("hse", "HSE")
       zr_ext = EXT_HSE
    case ("interp", "INTERP")       
       zr_ext = EXT_INTERP
    case default
       zr_ext = EXT_UNDEFINED
    end select

    !$acc update device(xl_ext, yl_ext, zl_ext, xr_ext, yr_ext, zr_ext)

#ifdef CUDA
  cudaMemcpyAsync(xl_ext_d, xl_ext, 1)
  cudaMemcpyAsync(xr_ext_d, xr_ext, 1)
  cudaMemcpyAsync(yl_ext_d, yl_ext, 1)
  cudaMemcpyAsync(yr_ext_d, yr_ext, 1)
  cudaMemcpyAsync(zl_ext_d, zl_ext, 1)
  cudaMemcpyAsync(zr_ext_d, zr_ext, 1)
#endif

    call amrex_parmparse_destroy(pp)

  end subroutine set_castro_method_params

#ifdef RADIATION
  subroutine get_qradvar(qradvar_in) bind(C, name="get_qradvar")

    use amrex_fort_module, only : rt => amrex_real
    implicit none

    integer, intent(inout) :: qradvar_in

    qradvar_in = QRADVAR

  end subroutine get_qradvar

  subroutine ca_init_radhydro_pars(fsp_type_in, do_is_in, com_in,fppt) &
       bind(C, name="ca_init_radhydro_pars")

    use rad_params_module, only : ngroups

    use amrex_fort_module, only : rt => amrex_real
    integer, intent(in) :: fsp_type_in, do_is_in, com_in
    real(rt)        , intent(in) :: fppt

    QPTOT  = QVAR+1
    QREITOT = QVAR+2
    QRAD = QVAR+3
    QRADHI = qrad+ngroups-1
  
    QRADVAR = QVAR + 2 + ngroups
  
    ! update NQ -- it was already initialized in the hydro
    NQ = QRADVAR

    ! NQAUX already knows about the hydro and the non-group-dependent
    ! rad variables, update it here
    NQAUX = NQAUX + ngroups

    if (ngroups .eq. 1) then
       fspace_type = 1
    else
       fspace_type = fsp_type_in
    end if
    
    if (fsp_type_in .ne. 1 .and. fsp_type_in .ne. 2) then
       call bl_error("Unknown fspace_type", fspace_type)
    end if
    
    do_inelastic_scattering = (do_is_in .ne. 0)
    
    if (com_in .eq. 1) then
       comoving = .true.
    else if (com_in .eq. 0) then
       comoving = .false.
    else
       call bl_error("Wrong value for comoving", fspace_type)
    end if
    
    flatten_pp_threshold = fppt
    
    !$acc update &
    !$acc device(NQ,NQAUX) &
    !$acc device(QRADVAR, QRAD, QRADHI, QPTOT, QREITOT) &
    !$acc device(fspace_type) &
    !$acc device(do_inelastic_scattering) &
    !$acc device(comoving)
    !$acc device(flatten_pp_threshold = -1.e0_rt)

#ifdef CUDA
    cudaMemcpyAsync(NQ_d, NQ, 1)
    cudaMemcpyAsync(NQAUX_d, NQAUX, 1)
    cudaMemcpyAsync(QRADVAR_d, QRADVAR, 1)
    cudaMemcpyAsync(QRAD_d, QRAD, 1)
    cudaMemcpyAsync(QRADHI_d, QRADHI, 1)
    cudaMemcpyAsync(QPTOT_d, QPTOT, 1)
    cudaMemcpyAsync(QREITOT_d, QREITOT, 1)
    cudaMemcpyAsync(do_inelastic_scattering_d, do_inelastic_scattering, 1)
    cudaMemcpyAsync(comoving_d, comoving, 1)
    cudaMemcpyAsync(flatten_pp_threshold_d, flatten_pp_threshold, 1)
#endif

  end subroutine ca_init_radhydro_pars
#endif

end module meth_params_module
