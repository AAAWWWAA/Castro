# name                      type          default     need in Fortran?    ifdef        fortran name             fortran type

#-----------------------------------------------------------------------------
# category: hydrodynamics
#-----------------------------------------------------------------------------

# the coefficient of the artificial viscosity
difmag                       Real          0.1                y

# the small density cutoff.  Densities below this value will be reset
small_dens                   Real         -1.e200             y

# the small temperature cutoff.  Temperatures below this value will 
# be reset
small_temp                   Real         -1.e200             y

# the small pressure cutoff.  Pressures below this value will be reset
small_pres                   Real         -1.e200             y

# the small specific internal energy cutoff.  Pressures below this
# value will be reset
small_ener                   Real         -1.e200             y

# permits hydro to be turned on and off for running pure rad problems
do_hydro                     int          -1                  y

# if true, define an additional source term   
add_ext_src                  int           0

# whether to use the hybrid advection scheme that updates
# z-angular momentum, cylindrical momentum, and azimuthal
# momentum (3D only)
hybrid_hydro                 int           0                  y

# reconstruction type: 
# 0: piecewise linear; 
# 1: classic Colella \& Woodward ppm;
# 2: extrema-preserving ppm
ppm_type                     int           1                  y

# do we take the reference state for the characteristic projection
# to be the cell centers (0) or the integral under the parabola
# for the fastest moving wave toward the interface (1)
ppm_reference                int           1                  y

# to we reconstruct and trace under the parabolas of the source
# terms to the velocity (gravity and rotation)
ppm_trace_sources            int           0                  y

# various methods of giving temperature a larger role in the 
# reconstruction---see Zingale \& Katz 2015
ppm_temp_fix                 int           0                  y

# to we use $\tau = 1/rho$ or $\rho$ in the eigensystem?
ppm_tau_in_tracing           int           0                  y

# do we construct $\gamma_e = p/(\rho e) + 1$ and bring it
# to the interfaces for additional thermodynamic information
# (this is the Colella \& Glaz technique) or do we use $(\rho e)$
# (the classic \castro\ behavior).
ppm_predict_gammae           int           0                  y

# do we take the reference state when no waves are moving toward
# the interface to be the cell center (0) or the limit of the
# reconstructed parabola at the interface (1)
ppm_reference_edge_limit     int           1                  y

# do we use the reference state in evaluating the eigenvectors?
ppm_reference_eigenvectors   int           0                  y

# do we drop from our regular Riemann solver to HLL when we
# are in shocks to avoid the odd-even decoupling instability?
hybrid_riemann               int           0                  y

# this is deprecated---use {\tt riemann\_solver} instead
use_colglaz                  int           0                  y

# which Riemann solver do we use:
# 0: Colella, Glaz, \& Ferguson (a two-shock solver);
# 1: Colella \& Glaz (a two-shock solver)
# 2: HLLC
riemann_solver               int           0                  y

# for the Colella \& Glaz Riemann solver, the maximum number
# of iterations to take when solving for the star state
cg_maxiter                   int          12                  y

# for the Colella \& Glaz Riemann solver, the tolerance to 
# demand in finding the star state
cg_tol                       Real          1.0e-5             y

# for the Colella \& Glaz Riemann solver, what to do if
# we do not converge to a solution for the star state.
# 0 = do nothing; print iterations and exit
# 1 = revert to the original guess for p-star
# 2 = do a bisection search for another cg\_maxiter iterations.
cg_blend                     int           0                  y

# flatten the reconstructed profiles around shocks to prevent them
# from becoming too thin
use_flattening               int           1                  y

# where do we apply the flattening?  after we've done the tracing of 
# the states (0); or on the parabolic profiles before we've integrated
# under them (1)
ppm_flatten_before_integrals int           0                  y

# after we add the transverse correction to the interface states, replace
# the predicted pressure with an EOS call (using $e$ and $\rho$).
transverse_use_eos           int           0                  y

# if the transverse interface state correction, if the new density is
# negative, then replace all of the interface quantities with their
# values without the transverse correction.
transverse_reset_density     int           0                  y

# if the interface state for $(\rho e)$ is negative after we add the
# transverse terms, then replace the interface value of $(\rho e)$
# with a value constructed from the $(\rho e)$ evolution equation
transverse_reset_rhoe        int           0                  y

dual_energy_update_E_from_e  int           1                  y        None            dual_energy_update_E_from_e    logical
dual_energy_eta1             Real          1.0e0              y
dual_energy_eta2             Real          1.0e-4             y
dual_energy_eta3             Real          0.0e0              y

# for the piecewise linear reconstruction, do we subtract off $(\rho g)$
# from the pressure before limiting?
use_pslope                   int           1                  y

fix_mass_flux                int           0                  y
allow_negative_energy        int           1                  y

# permits sponge to be turned on and off 
do_sponge                    int           0                  y


sum_turb_src                 Real          0.0                n        SGS


#-----------------------------------------------------------------------------
# category: timestep control
#-----------------------------------------------------------------------------

# a fixed timestep to use for all steps (negative turns it off)
fixed_dt                     Real         -1.0

# the initial timestep (negative uses the step returned from the timestep
# constraints)
initial_dt                   Real         -1.0

# the smallest valid timestep---if we go below this, we abort
dt_cutoff                    Real          0.0

# the largest valid timestep---limit all timesteps to be no larger than this
max_dt                       Real          1.e200

# the effective Courant number to use---we will not allow the hydrodynamic
# waves to cross more than this fraction of a zone over a single timestep
cfl                          Real          0.8                y

# a factor by which to reduce the first timestep from that requested by
# the timestep estimators
init_shrink                  Real          1.0

# the maximum factor by which the timestep can increase from one step to
# the next.
change_max                   Real          1.1

# Retry a timestep if it violated the timestep-limiting criteria over
# the course of an advance. The criteria will suggest a new timestep
# that satisfies the criteria, and we will do subcycled timesteps
# on the same level until we reach the original target time.
use_retry                    int           0

#-----------------------------------------------------------------------------
# category: reactions
#-----------------------------------------------------------------------------

# Limit the timestep based on how much the burning can change the internal
# energy of a zone. The timestep is equal to
# {\tt dtnuc}  $\cdot\,(e / \dot{e})$.
dtnuc_e                      Real          1.e200             y

# Limit the timestep based on how much the burning can change the species
# mass fractions of a zone. The timestep is equal to
# {\tt dtnuc}  $\cdot\,(X / \dot{X})$.
dtnuc_X                      Real          1.e200             y

# If we are doing burning timestep limiting, choose the method for
# estimating $\dot{e}$ and $\dot{X}$.
# 1 == call the burner's RHS for an instantaneous calculation
# 2 == use the second-half burning from the last timestep
# 3 == use both the first- and the second-half burning from the last timestep
# 4 == use the change in the full state over the last timestep
dtnuc_mode                   int           1                  y

# limit the zone size based on how much the burning can change the internal 
# energy of a zone. The zone size on the finest level must be smaller than
# {\tt dxnuc} $\cdot\, c_s\cdot (e / \dot{e})$, where $c_s$ is the sound speed.
# This ensures that the sound-crossing time is smaller than the
# nuclear energy injection timescale.
dxnuc                        Real          1.e200             y

# permits reactions to be turned on and off -- mostly for efficiency's sake 
do_react                     int          -1                  y

# minimum temperature for allowing reactions to occur in a zone
react_T_min                  Real          0.0                y

# maximum temperature for allowing reactions to occur in a zone
react_T_max                  Real          1.e200             y

#-----------------------------------------------------------------------------
# category: gravity and rotation
#-----------------------------------------------------------------------------

# permits gravity calculation to be turned on and off   
do_grav                      int          -1                  y

# to we recompute the center used for the multipole gravity solve each step?
moving_center                int           0

grav_source_type             int           2                  y

# extrapolate the source terms (gravity and rotation) to $n+1/2$
# timelevel for use in the interface state prediction
source_term_predictor        int           0

# permits rotation calculation to be turned on and off 
do_rotation                  int          -1                  y

# the rotation period for the corotating frame
rotational_period            Real         -1.e200             y        ROTATION        rot_period

# the rotation periods time evolution---this allows the rotation rate to
# change durning the simulation time
rotational_dPdt              Real          0.0                y        ROTATION        rot_period_dot

# determines how the rotation source terms are added to the momentum and
# energy equations
rot_source_type              int           1                  y        ROTATION

# the coordinate axis ($x=1$, $y=2$, $z=3$) for the rotation vector
rot_axis                     int           3                  y        ROTATION

# include a central point mass
point_mass                   Real          0.0                y        POINTMASS

#-----------------------------------------------------------------------------
# category: parallelization
#-----------------------------------------------------------------------------

# determines whether we use accelerators for specific loops
do_acc                       int          -1                  y

bndry_func_thread_safe       int           1


#-----------------------------------------------------------------------------
# category: embiggening
#-----------------------------------------------------------------------------

# the factor by which to extend the domain upon restart for embiggening
grown_factor                 int           1

# used with the embiggening routines to determine how to extend the domain
star_at_center               int          -1


#-----------------------------------------------------------------------------
# category: refinement
#-----------------------------------------------------------------------------


do_special_tagging           int           0

spherical_star               int           0  


#-----------------------------------------------------------------------------
# category: diagnostics
#-----------------------------------------------------------------------------

# display warnings in Fortran90 routines
print_fortran_warnings       int           (0, 1)

# display breakdown of energy sources 
print_energy_diagnostics     int           (0, 1)

# how often (number of coarse timesteps) to compute integral sums (for runtime diagnostics)
sum_interval                 int           -1

# how often (simulation time) to compute integral sums (for runtime diagnostics)
sum_per                      Real          -1.0e0

# display center of mass diagnostics
show_center_of_mass          int           0

# abort if we exceed CFL = 1 over the cource of a timestep
hard_cfl_limit               int           1

# a string describing the simulation that will be copied into the
# plotfile's {\tt job\_info} file
job_name                     string        ""
